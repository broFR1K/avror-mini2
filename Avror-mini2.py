from colorama import init, Fore
import time
import os
import requests
import json
import socket
import whois
from concurrent.futures import ThreadPoolExecutor
import art
from openpyxl import load_workbook
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm
import random
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
def clear_console():
    if os.name == 'nt':
        os.system('cls')
    else:
        os.system('clear')

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def print_welcome_message():
    print(Fore.RED + '‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë')
    print(Fore.RED + '‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')
    print(Fore.RED + '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')
    print(Fore.RED + '‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')
    print(Fore.RED + '‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë')
    print(Fore.RED + '‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ïö‚ïê‚ïù')
    print(Fore.LIGHTYELLOW_EX + "Version : AVROR-mini")
    print(" ")
    print(Fore.CYAN + '> –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ : broFR1k')
    print(Fore.CYAN + "> –ö–∞–Ω–∞–ª telegram : https://t.me/AVROR_S'")
    print(Fore.CYAN + ">Discord Server :   https://t.me/AVROR_S/73")
    print(Fore.CYAN + "> –í–µ—Ä—Å–∏—è : BETTA 2.0")
    print(" ")
    print(Fore.GREEN + "=============================================================")
    print(Fore.GREEN + "–î–∞–Ω–Ω—ã–π –°–æ—Ñ—Ç –°–æ–∑–¥–∞–Ω –ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π")
    print(Fore.GREEN + "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è")
    print(Fore.GREEN + "=============================================================")
    time.sleep(2)
    print(" ")
    print(Fore.RED + "[1] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP")
    print(Fore.RED + "[2] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –¢–µ–ª. –ù–æ–º–µ—Ä")
    print(Fore.RED + "[3] –ü—Ä–æ–±–∏–≤ –ø–æ –Ω–∏–∫—É")
    print(Fore.RED + "[4] –ü—Ä–æ–±–∏–≤ –ø–æ –¥–æ–º–µ–Ω—É")
    print(Fore.RED + "[5] –ü—Ä–æ–±–∏–≤ –ø–æ —Ç–≥ [–ë–î]")
    print(Fore.RED + "[6] –ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä–∞ [–ë–î]")
    print(" ")
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main():
    while True:
        clear_console()
        print_welcome_message()

        try:
            user_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-6) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()

            clear_console()

            if user_choice == "1":
                art.tprint("AVROR_IP")
                tracker = IPTracker()
                tracker.track_ip()

            elif user_choice == "2":
                art.tprint("AVROR_Phone")
                phone_info = PhoneNumberInfo()
                phone_info.print_number_info()

            elif user_choice == "3":
                art.tprint("AVROR_Name")
                username = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ").strip()
                tracker = UsernameTracker(username)
                tracker.track()
                tracker.show_results()

            elif user_choice == "4":
                art.tprint("AVROR_Domen")
                domain = input(Fore.YELLOW + "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Å–∞–π—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): ").strip()
                scanner = DomainScanner(domain)
                scanner.run()

            elif user_choice == "5":
             folder_path = "Telegram"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
             os.system('cls')
             art.tprint("AVROR_TG-BD")
             search_term = input("–í–≤–µ–¥–∏—Ç–µ ID: ")  # –í–≤–æ–¥ —á–∏—Å–ª–∞

             searcher = ExcelSearchertg(folder_path)
             searcher.search_in_folder(search_term)


            elif user_choice == "6":
             folder_path = "Phone"  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
             os.system('cls')
             art.tprint("AVROR_PH-BD")
             search_term = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–µ–∑ '+' –∏–ª–∏ —Å '+': ")  # –í–≤–æ–¥ —á–∏—Å–ª–∞

             searcher = ExcelSearcherphone(folder_path)
             searcher.search_in_folder(search_term)


            elif user_choice.lower() == 'q':
                print(Fore.GREEN + "–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            else:
                print(Fore.RED + "–í—ã–±–µ—Ä–∏—Ç–µ 1-6 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'q' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")

            input(Fore.GREEN + "\n–ù–∞–∂–º–∏—Ç–µ 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

        except Exception as e:
            print(Fore.RED + f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            input(Fore.GREEN + "\n–ù–∞–∂–º–∏—Ç–µ 'Enter' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
#__________________________________________________________________________________________________________#
# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IP
class IPTracker:
    def __init__(self):
        self.ip = None
        self.ip_data = None
    
    def get_ip(self):
        self.ip = input("\n –í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å (–∏–ª–∏ 'Enter' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã): ").strip()
        if not self.ip:
            return False  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ IP –Ω–µ –≤–≤–µ–¥–µ–Ω
        return True

    def fetch_ip_data(self):
        if not self.ip:
            print("–î–∞–Ω–Ω—ã–µ –æ–± IP-–∞–¥—Ä–µ—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        try:
            req_api = requests.get(f"http://ipwho.is/{self.ip}")
            self.ip_data = req_api.json()
        except requests.RequestException as e:
            print("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–∞:", e)
    
    def display_ip_info(self):
        if not self.ip_data:
            print("–î–∞–Ω–Ω—ã–µ –æ–± IP-–∞–¥—Ä–µ—Å–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            return
        print('\n           üÑ∞üÖÖüÖÅüÑæüÖÅ üÑ∏üÑø                ')
        print("\n IP –ñ–µ—Ä—Ç–≤—ã           :", self.ip)
        print(" –¢–∏–ø IP              :", self.ip_data.get("type"))
        print(" –°—Ç—Ä–∞–Ω–∞              :", self.ip_data.get("country"))
        print(" –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã          :", self.ip_data.get("country_code"))
        print(" –ì–æ—Ä–æ–¥               :", self.ip_data.get("city"))
        print(" –ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç           :", self.ip_data.get("continent"))
        print(" –ö–æ–¥ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞      :", self.ip_data.get("continent_code"))
        print(" –†–µ–≥–∏–æ–Ω              :", self.ip_data.get("region"))
        print(" –ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞         :", self.ip_data.get("region_code"))
        print(" –®–∏—Ä–æ—Ç–∞              :", self.ip_data.get("latitude"))
        print(" –î–æ–ª–≥–æ—Ç–∞             :", self.ip_data.get("longitude"))
        
        lat = self.ip_data.get('latitude')
        lon = self.ip_data.get('longitude')
        print(" –ö–∞—Ä—Ç–∞               :", f"https://www.google.com/maps/@{lat},{lon},8z")
        print(" –ï–≤—Ä–æ—Å–æ—é–∑            :", self.ip_data.get("is_eu"))
        print(" –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å     :", self.ip_data.get("postal"))
        print(" –ö–æ–¥ –≤—ã–∑–æ–≤–∞          :", self.ip_data.get("calling_code"))
        print(" –ö–∞–ø–∏—Ç–∞–ª             :", self.ip_data.get("capital"))
        print(" –ì—Ä–∞–Ω–∏—Ü—ã             :", self.ip_data.get("borders"))
        print(" –§–ª–∞–≥ –°—Ç—Ä–∞–Ω—ã         :", self.ip_data["flag"]["emoji"])
        print(" ASN                 :", self.ip_data["connection"]["asn"])
        print(" ORG                 :", self.ip_data["connection"]["org"])
        print(" –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä  :", self.ip_data["connection"]["isp"])
        print(" –î–æ–º–µ–Ω               :", self.ip_data["connection"]["domain"])
        print(" ID                  :", self.ip_data["timezone"]["id"])
        print(" –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ          :", self.ip_data["timezone"]["abbr"])
        print(" –õ–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è        :", self.ip_data["timezone"]["is_dst"])
        print(" Offset              :", self.ip_data["timezone"]["offset"])
        print(" UTC                 :", self.ip_data["timezone"]["utc"])
        print(" –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è       :", self.ip_data["timezone"]["current_time"])
    
    def track_ip(self):
        while True:
            if not self.get_ip():
                print("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            self.fetch_ip_data()
            time.sleep(2)
            self.display_ip_info()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–µ–Ω–æ–º
class DomainScanner:
    def __init__(self, domain, start_port=1, end_port=8090):
        self.domain = domain
        self.start_port = start_port
        self.end_port = end_port
        self.ip_address = None
        self.domain_info = None

    def get_ip_address(self):
        try:
            self.ip_address = socket.gethostbyname(self.domain)
            return self.ip_address
        except socket.gaierror:
            print(Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–º–µ–Ω–∞: {self.domain}")
            return None

    def get_domain_info(self):
        try:
            self.domain_info = whois.whois(self.domain)
            return self.domain_info
        except Exception as e:
            print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ: {e}")
            return None

    def display_domain_info(self):
        if self.domain_info:
            print(Fore.GREEN + "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ:")
            print(Fore.GREEN + f"–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è: {self.domain_info.domain_name}")
            print(Fore.GREEN + f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.domain_info.creation_date}")
            print(Fore.GREEN + f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.domain_info.updated_date}")
            print(Fore.GREEN + f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {self.domain_info.expiration_date}")
            print(Fore.GREEN + f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {self.domain_info.registrar}")
            print(Fore.GREEN + f"–°—Ç—Ä–∞–Ω–∞: {self.domain_info.country}")

            print(Fore.GREEN + f"–°—Ç–∞—Ç—É—Å –¥–æ–º–µ–Ω–∞: {self.domain_info.status}")
            print(Fore.GREEN + f"DNS-—Å–µ—Ä–≤–µ—Ä—ã: {', '.join(self.domain_info.name_servers) if self.domain_info.name_servers else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")

            print(Fore.GREEN + f"Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.domain_info.emails if self.domain_info.emails else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            print(Fore.GREEN + f"–¢–µ–ª–µ—Ñ–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.domain_info.phone if self.domain_info.phone else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
            print(Fore.GREEN + f"–ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {self.domain_info.admin if self.domain_info.admin else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        else:
            print(Fore.RED + "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

    def scan_port(self, port):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
                sock.settimeout(1)  # –¢–∞–π–º-–∞—É—Ç –≤ 1 —Å–µ–∫—É–Ω–¥—É
                result = sock.connect_ex((self.ip_address, port))
                return port if result == 0 else None
        except Exception as e:
            print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Ä—Ç–∞ {port}: {e}")
            return None

    def scan_ports(self):
        if not self.ip_address:
            print(Fore.RED + "IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ IP-–∞–¥—Ä–µ—Å.")
            return []

        open_ports = []
        with ThreadPoolExecutor(max_workers=100) as executor:
            futures = {executor.submit(self.scan_port, port): port for port in range(self.start_port, self.end_port + 1)}
            for future in futures:
                try:
                    port = future.result()
                    if port is not None:
                        open_ports.append(port)
                except Exception as e:
                    print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–∞: {e}")
        return open_ports

    def run(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–º–µ–Ω–µ
        self.get_domain_info()
        self.display_domain_info()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞
        ip_address = self.get_ip_address()
        if ip_address:
            print(Fore.CYAN + f"\nIP-–∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ {self.domain}: {ip_address}")

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
            open_ports = self.scan_ports()
            if open_ports:
                print(Fore.GREEN + f"\n–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ {ip_address}: {', '.join(map(str, open_ports))}")
            else:
                print(Fore.YELLOW + f"\n–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ {ip_address} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {self.start_port}-{self.end_port}.")
        else:
            print(Fore.RED + "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class UsernameTracker:
    def __init__(self, username):
        self.username = username
        self.results = {}
        self.social_media = [
            {"url": "https://www.github.com/{}", "name": "GitHub"},
            {"url": "https://www.pinterest.com/{}", "name": "Pinterest"},
            {"url": "https://www.tumblr.com/{}", "name": "Tumblr"},
            {"url": "https://www.youtube.com/{}", "name": "Youtube"},
            {"url": "https://soundcloud.com/{}", "name": "SoundCloud"},
            {"url": "https://www.snapchat.com/add/{}", "name": "Snapchat"},
            {"url": "https://www.tiktok.com/@{}", "name": "TikTok"},
            {"url": "https://www.behance.net/{}", "name": "Behance"},
            {"url": "https://www.medium.com/@{}", "name": "Medium"},
            {"url": "https://www.quora.com/profile/{}", "name": "Quora"},
            {"url": "https://www.flickr.com/people/{}", "name": "Flickr"},
            {"url": "https://www.periscope.tv/{}", "name": "Periscope"},
            {"url": "https://www.twitch.tv/{}", "name": "Twitch"},
            {"url": "https://www.dribbble.com/{}", "name": "Dribbble"},
            {"url": "https://www.stumbleupon.com/stumbler/{}", "name": "StumbleUpon"},
            {"url": "https://www.ello.co/{}", "name": "Ello"},
            {"url": "https://www.producthunt.com/@{}", "name": "Product Hunt"},
            {"url": "https://www.snapchat.com/add/{}", "name": "Snapchat"},
            {"url": "https://www.telegram.me/{}", "name": "Telegram"},
            {"url": "https://www.weheartit.com/{}", "name": "We Heart It"}
        ]

    def track(self):
        try:
            for site in self.social_media:
                url = site['url'].format(self.username)
                response = requests.get(url)
                if response.status_code == 200:
                    self.results[site['name']] = url
                else:
                    self.results[site['name']] = "Username not found!"
        except requests.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {site['name']}: {e}")

    def show_results(self):
        print(Fore.GREEN + f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è {self.username}:")
        for site, result in self.results.items():
            print(f"{site}: {result}")

class PhoneNumberInfo:
    def __init__(self):
        # –°–ø–∏—Å–æ–∫ API-–∫–ª—é—á–µ–π
        self.api_keys = [
            "83f567f1d514285201c48ce6669beb16",
            "c4a963e65cc53da7faaf0d2d39ae2955",
            "43637603eda5160dfcd8c8c5ad25cbe7",
            "0ad04fb3a06a51cc86429d6d9d4bf1d2",
            "90c90131b6b0ad8eb69b95ddc62f8968",
            "3e217160a7e61ba9ab9cb50fafa23a2c",
            "be3e4e957020132d631215e433c058ff",
            "1849da3c2ebf926fc4720d17797108ca",
            "9b2063919453d3f4caef5d32f128ffdf",
            "1e55b812d95d85b2688f1ecfb4ce0265",
            "bf0fdc3d48531aec6eff34d865896faa",
            "3017c4832557c5550f8080f374c29d14",
            "a6532784f3cc688179004418d9a4159a",
            "911bd53f1bded96ebcbead9225b96af1",
            "bacc0fffe4c1517864de86e1447a04e8"
            # –î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        ]
        # –®–∞–±–ª–æ–Ω –¥–ª—è URL API —Å —Ñ–æ—Ä–º–∞—Ç–æ–º json, –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–ª—é—á–æ–º
        self.htmlweb_api_url = "http://htmlweb.ru/geo/api.php?json&telcod={user_number}&api_key={api_key}"
        self.cache_file = 'infa_phone.json'
        self._load_cache()
        self.request_limit = 5  # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å

    def _load_cache(self):
        try:
            with open(self.cache_file, 'r') as file:
                self.cache = json.load(file)
        except FileNotFoundError:
            self.cache = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'daily_requests' not in self.cache:
            self.cache['daily_requests'] = {
                'date': str(datetime.now().date()),
                'count': 0
            }

    def _save_cache(self):
        with open(self.cache_file, 'w') as file:
            json.dump(self.cache, file)

    def _check_request_limit(self):
        today = str(datetime.now().date())
        if self.cache['daily_requests']['date'] != today:
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            self.cache['daily_requests'] = {'date': today, 'count': 0}

        remaining_requests = self.request_limit - self.cache['daily_requests']['count']
        if remaining_requests > 0:
            return True, remaining_requests
        else:
            return False, remaining_requests

    def _increment_request_count(self):
        self.cache['daily_requests']['count'] += 1
        self._save_cache()

    def get_number_data(self, user_number):
        can_request, remaining_requests = self._check_request_limit()
        if not can_request:
            return {"status_error": True, "message": "–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.", "remaining_requests": remaining_requests}

        if user_number in self.cache:
            return self.cache[user_number]

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π API-–∫–ª—é—á
        api_key = random.choice(self.api_keys)
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ API-–∫–ª—é—á–æ–º
        api_url = self.htmlweb_api_url.format(user_number=user_number, api_key=api_key)
        response_htmlweb = requests.get(api_url)
        if response_htmlweb.ok:
            data_htmlweb = response_htmlweb.json()

            self.cache[user_number] = data_htmlweb
            self._increment_request_count()
            return data_htmlweb
        else:
            return {"status_error": True}

    def print_number_info(self):
        user_number = input(Fore.GREEN + "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '+': ").strip()

        if user_number:
            print("–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö...\n")
            data = self.get_number_data(user_number)
            if data.get("status_error"):
                if "message" in data:
                    print(Fore.RED + data["message"])
                else:
                    print(Fore.RED + "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                print(Fore.YELLOW + f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {data.get('remaining_requests', 0)}")
                return

            if data.get("limit") == 0:
                print(Fore.GREEN + "–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –≤—Å–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤. –í–∫–ª—é—á–∏—Ç–µ VPN –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 24—á")
                return

            country = data.get('country', {})
            region = data.get('region', {})
            other = data.get('0', {})

            print(Fore.BLUE + f"–°—Ç—Ä–∞–Ω–∞: {country.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {country.get('fullname', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ì–æ—Ä–æ–¥: {other.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {other.get('post', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ö–æ–¥ –≤–∞–ª—é—Ç—ã: {country.get('iso', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –∫–æ–¥—ã: {data.get('capital', {}).get('telcod', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ wiki: {other.get('wiki', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ì–æ—Å. –Ω–æ–º–µ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –∞–≤—Ç–æ: {region.get('autocod', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {other.get('oper', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {other.get('oper_brand', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {other.get('def', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {country.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {region.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {other.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')} ({region.get('okrug', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')})")

            latitude = other.get('latitude', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
            longitude = other.get('longitude', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
            location = data.get('location', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
            lang = country.get('lang', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ').title()
            lang_code = country.get('langcod', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
            capital = data.get('capital', {}).get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')

            print(Fore.BLUE + f"–û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ (google): https://www.google.com/maps/place/{latitude}+{longitude}")
            print(Fore.BLUE + f"–õ–æ–∫–∞—Ü–∏—è: {location}")
            print(Fore.BLUE + f"–Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {lang}, {lang_code}")
            print(Fore.BLUE + f"–ö—Ä–∞–π/–û–∫—Ä—É–≥/–û–±–ª–∞—Å—Ç—å: {region.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}, {region.get('okrug', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
            print(Fore.BLUE + f"–°—Ç–æ–ª–∏—Ü–∞: {capital}")
            print(Fore.BLUE + f"–®–∏—Ä–æ—Ç–∞/–î–æ–ª–≥–æ—Ç–∞: {latitude}, {longitude}")
            print(Fore.BLUE + f"–û—Ü–µ–Ω–∫–∞ –Ω–æ–º–µ—Ä–∞ –≤ —Å–µ—Ç–∏: https://phoneradar.ru/phone/{user_number}")
            print(Fore.RED + " ")
            print(Fore.RED  + f"Whatsapp : https://wa.me/{user_number}")
            print(Fore.RED +  f"Viber -> https://viber.click/{user_number}")
            print(Fore.RED + f"Telegram -> https://t.me/{user_number}")
            # –í—ã–≤–æ–¥ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            remaining_requests = self.request_limit - self.cache['daily_requests']['count']
            print(Fore.YELLOW + f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {remaining_requests}")
        else:
            print(Fore.RED + "–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω.")





class ExcelSearchertg:
    def __init__(self, folder_path, max_workers=4):
        self.folder_path = folder_path
        self.max_workers = max_workers  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    def search_in_file(self, file_path, search_term):
        results = []
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é openpyxl
            workbook = load_workbook(file_path, data_only=True)
            
            # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = [cell.value for cell in sheet[1]]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                
                # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç–µ
                for row_idx, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
                    if any(str(cell) == search_term for cell in row if cell is not None):
                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        matched_data = {headers[i] if i < len(headers) else f"Column {i+1}": cell for i, cell in enumerate(row)}
                        result = {
                            "file": os.path.basename(file_path),
                            "sheet": sheet_name,
                            "data": matched_data
                        }
                        results.append(result)
                        break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return results

    def format_output(self, result, search_term):
        print(f"–ß–∏—Å–ª–æ '{search_term}' –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ '{result['file']}', –ª–∏—Å—Ç '{result['sheet']}':\n")
        for column_name, value in result['data'].items():
            # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º
            formatted_value = value if isinstance(value, (int, float)) else str(value)
            print(f"{column_name} - {formatted_value}")
        print("\n" + "="*40 + "\n")  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏

    def search_in_folder(self, search_term):
        results = []
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ .xlsx –≤ –ø–∞–ø–∫–µ
        files = [os.path.join(self.folder_path, f) for f in os.listdir(self.folder_path) if f.endswith(".xlsx")]
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            future_to_file = {executor.submit(self.search_in_file, file, search_term): file for file in files}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tqdm –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for future in tqdm(as_completed(future_to_file), total=len(future_to_file), desc="–ü–æ–∏—Å–∫"):
                try:
                    file_results = future.result()
                    results.extend(file_results)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for result in results:
            self.format_output(result, search_term)


class ExcelSearcherphone:
    def __init__(self, folder_path, max_workers=4):
        self.folder_path = folder_path
        self.max_workers = max_workers  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    def search_in_file(self, file_path, search_term):
        results = []
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é openpyxl
            workbook = load_workbook(file_path, data_only=True)
            
            # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            for sheet_name in workbook.sheetnames:
                sheet = workbook[sheet_name]
                
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
                headers = [cell.value for cell in sheet[1]]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
                
                # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –ª–∏—Å—Ç–µ
                for row_idx, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), start=2):
                    if any(str(cell) == search_term for cell in row if cell is not None):
                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                        matched_data = {headers[i] if i < len(headers) else f"Column {i+1}": cell for i, cell in enumerate(row)}
                        result = {
                            "file": os.path.basename(file_path),
                            "sheet": sheet_name,
                            "data": matched_data
                        }
                        results.append(result)
                        break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        
        return results

    def format_output(self, result, search_term):
        print(f"–ß–∏—Å–ª–æ '{search_term}' –Ω–∞–π–¥–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ '{result['file']}', –ª–∏—Å—Ç '{result['sheet']}':\n")
        for column_name, value in result['data'].items():
            # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º
            formatted_value = value if isinstance(value, (int, float)) else str(value)
            print(f"{column_name} - {formatted_value}")
        print("\n" + "="*40 + "\n")  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏

    def search_in_folder(self, search_term):
        results = []
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ .xlsx –≤ –ø–∞–ø–∫–µ
        files = [os.path.join(self.folder_path, f) for f in os.listdir(self.folder_path) if f.endswith(".xlsx")]
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            future_to_file = {executor.submit(self.search_in_file, file, search_term): file for file in files}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º tqdm –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for future in tqdm(as_completed(future_to_file), total=len(future_to_file), desc="–ü–æ–∏—Å–∫"):
                try:
                    file_results = future.result()
                    results.extend(file_results)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for result in results:
            self.format_output(result, search_term)

if __name__ == "__main__":
    main()


